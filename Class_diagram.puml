@startuml
skinparam classAttributeIconSize 0

class MainActivity extends AppCompatActivity implements DeleteTaskListener {

    - Project[] allProjects {readOnly}
    - ArrayList<Task> tasks {readOnly}
    - TasksAdapter adapter {readOnly}
    - SortMethod sortMethod
    + AlertDialog dialog
    - Spinner dialogSpinner
    - RecyclerView listTasks

    - onPositiveButtonClick(DialogInterface)
    - showAddTaskDialog()
    - addTask(Task task)
    - showAddTaskDialog() void
    - updateTasks()
    - AlertDialog getAddTaskDialog()
    - populateDialogSpinner()
    - enum SortMethod{ALPHABETICAL,
                              ALPHABETICAL_INVERTED,
                              RECENT_FIRST,
                              OLD_FIRST,
                              NONE}
    - configureViewModel() void
}


class Task {
    - long id;
    - long projectId;
    - String name;
    - long creationTimestamp;

    + Task(long, long, String, long)
    + getId() :long
    + setId(long) void
    + getProject() :Project.getProjectById(projectId)
    + getProjectId() :long
    + setProjectId(long) void
    + getName() :String
    + setName(String) void
    + getCreationTimestamp() :long
    - setCreationTimestamp(long) void
}

 class TaskAZComparator <<static>> implements Comparator {
        + int compare(Task left, Task right) :int
    }

class TaskRecentComparator <<static>> implements Comparator {
        + int compare(Task left, Task right) :int
    }

 class TaskOldComparator <<static>> implements Comparator{
        + int compare(Task left, Task right) :int
    }

Task +-- "2" TaskAZComparator
Task +-- TaskRecentComparator
Task +-- TaskOldComparator


class Project {
    -long id
    -String name
    -int color

    -Project(long , String , int)
    +{static} getAllProjects() :Project[]
    +{static} getProjectById(long id) :Project
    +getId() :long
    +setId(long) void
    +getName() :String
    +setName(String) void
    +getColor() :int
    +toString() :getName
    }

class TasksAdapter extends RecyclerView.Adapter{
    private List<Task> tasks;
    private final DeleteTaskListener deleteTaskListener;
    TasksAdapter(final Task[], DeleteTaskListener )
    void updateTasks(Task[])
    public interface DeleteTaskListener
    bind(Task) void
}

class TaskViewHolder extends RecyclerView.ViewHolder {
        - AppCompatImageView imgProject {readOnly}
        - TextView lblTaskName {readOnly}
        - TextView lblProjectName {readOnly}
        - AppCompatImageView imgDelete {readOnly}
        - DeleteTaskListener deleteTaskListener {readOnly}
          TaskViewHolder(View, DeleteTaskListener)
    }

interface DeleteTaskListener {
            void onDeleteTask(Task task);
        }


TasksAdapter +-- DeleteTaskListener
TasksAdapter +-- TaskViewHolder
@enduml