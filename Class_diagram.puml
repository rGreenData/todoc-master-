@startuml
skinparam classAttributeIconSize 0

package ui {
class MainActivity implements DeleteTaskListener {
    - Project[] allProjects
    - Task[] tasks
    - TasksAdapter adapter {readOnly}
    - SortMethod sortMethod
    + AlertDialog dialog
    - EditText dialogEditText
    - Spinner dialogSpinner
    - RecyclerView listTasks
    - TextView lblNoTasks
    - ItemViewModel itemViewModel

    - onPositiveButtonClick(DialogInterface)
    - showAddTaskDialog() void
    - addTask(Task) void
    - updateTasks()
    - AlertDialog getAddTaskDialog()
    - populateDialogSpinner()
    - configureViewModel() void
    - getTasks() void
    - getAllProject() void
}

enum SortMethod{
    ALPHABETICAL
    ALPHABETICAL_INVERTED
    RECENT_FIRST
    OLD_FIRST
    NONE
}

class ItemViewModel {
    - TaskDataRepository taskDataSource {readOnly}
    - ProjectDataRepository projectDataSource {readOnly}
    - Executor executor {readOnly}
    - LiveData Task[] currentTasks;
    + ItemViewModel(TaskDataRepository, ProjectDataRepository, Executor)
    + init()
    + getAllProject() : LiveData Project[]
    + addTask(Task) void
    + deleteTask(Long) void
    + getTasks() :LiveData Task[]
}

class TasksAdapter {
    - Task[] tasks
    - Project[] taskProject
    - DeleteTaskListener deleteTaskListener {readOnly}
    + TasksAdapter(DeleteTaskListener)
    + updateTasks(Project[], Task[])
}

interface DeleteTaskListener {
            void onDeleteTask(Task)
}

class TaskViewHolder {
    - AppCompatImageView imgProject {readOnly}
    - TextView lblTaskName {readOnly}
    - TextView lblProjectName {readOnly}
    - AppCompatImageView imgDelete {readOnly}
    - DeleteTaskListener deleteTaskListener {readOnly}
    + TaskViewHolder(View, DeleteTaskListener)
    + bind(Task) void
}
}

package model{
    class Project {
    -long id
    -String name
    -int color
    -Project(long , String , int)
    +{static} getAllProjects() :Project[]
    +{static} getProjectById(long id) :Project
    +getId() :long
    +setId(long) void
    +getName() :String
    +setName(String) void
    +getColor() :int
    +toString() :getName
}
note left : Table <<project>> dataBase


Project "1" - "3" Project

class Task {
    - long id
    - long projectId
    - String name;
    - long creationTimestamp;
    + Task(long, long, String, long)
    + getId() :long
    + setId(long) void
    + getProject() :Project
    + getProjectId() :long
    - setProjectId(long) void
    + getName() :String
    + setName(String) void
    + getCreationTimestamp() :long
    - setCreationTimestamp(long) void
}

note left : Table <<task>> dataBase

class TaskAZComparator <<static>> {
+ compare(Task left, Task right) :int
}

class TaskZAComparator <<static>> {
+ compare(Task left, Task right) :int
}

class TaskRecentComparator <<static>> {
+ int compare(Task left, Task right) :int
}

class TaskOldComparator <<static>> {
+ int compare(Task left, Task right) :int
}
}

package repository {
class TaskDataRepository {
    -TaskDao taskDao {readOnly}
    +TaskDataRepository(TaskDao)
    +getTasks() :LiveData Task[]
    + addTask(Task) void
    + deleteTask(long) void
}


class ProjectDataRepository {
    - ProjectDao projectDao {readOnly}
    + ProjectDataRepository(ProjectDao)
    + getAllProject() :LiveData Project[]
  }
}

package dao{
interface TaskDao{
    +getTasks() :LiveData Task[]
    +long insertTask(Task pTask) void
    +int deleteTask(long taskId) void
   }

interface ProjectDao {
    +getAllProject() :LiveData Project[]
    +long createProject(Project) void
   }
}


package database{
abstract TodocDataBase  {
-{static} volatile TodocDataBase INSTANCE
+{abstract} TaskDao taskDao();
+{abstract} ProjectDao ProjectDao();
+{static} TodocDataBase getInstance(Context) :INSTANCE
-{static} Callback prepopulateDatabase()
}
}


package injection {
class ViewModelFactory {
    - ProjectDataRepository projectDataSource {readOnly}
    - TaskDataRepository taskDataSource {readOnly}
    - Executor executor {readOnly}
    + ViewModelFactory(TaskDataRepository, ProjectDataRepository , Executor)
}
class Injection {
    - {static}TodocDataBase dataBase
    + {static} ProjectDataRepository provideProjectDataSource(Context):ProjectDataRepository(dataBase.ProjectDao())
    + {static} TaskDataRepository provideTaskDataSource(Context):TaskDataRepository(dataBase.taskDao())
    + {static} Executor provideExecutor() :Executors.newSingleThreadExecutor()
    + {static} ViewModelFactory provideViewModelFactory(Context):ViewModelFactory(dataSourceTask, dataSourceProject, executor)
    }
}

MainActivity --> "1" TasksAdapter :adapter
MainActivity +-- SortMethod
MainActivity --> "1..*" Task : tasks
MainActivity --> Project :allProjects
MainActivity --> "1" ItemViewModel :itemViewModel
note "configureViewModel(){\nInjection.provideViewModelFactory()}" as N1
MainActivity.N1
N1..>Injection
Injection -> "1" ViewModelFactory
Injection -> "1" ProjectDataRepository
Injection --> "1" TaskDataRepository
Injection --> "1" TodocDataBase :dataBase

Task +-- TaskAZComparator
Task +-- TaskZAComparator
Task +-- TaskRecentComparator
Task +-- TaskOldComparator

TasksAdapter +-- DeleteTaskListener
TasksAdapter +-- TaskViewHolder

TodocDataBase  --> "1" ProjectDao
TodocDataBase  --> "1" TaskDao
note "prepopulateDatabase(){\nProject.getAllProjects()}" as N3
TodocDataBase..N3
N3..>Project

TaskDataRepository --> "1" TaskDao : taskDao
ProjectDataRepository --> "1" ProjectDao :ProjectDao

note "@Override create(){\nnew ItemViewModel(taskDataSource, projectDataSource, executor)}" as N2
ViewModelFactory..N2
N2..>ItemViewModel

@enduml
