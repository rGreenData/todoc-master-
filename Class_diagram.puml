@startuml
skinparam classAttributeIconSize 0

class MainActivity extends AppCompatActivity implements DeleteTaskListener {

    - Project[] allProjects
    - Task[] tasks
    - TasksAdapter adapter {readOnly}
    - SortMethod sortMethod
    + AlertDialog dialog
    - EditText dialogEditText
    - Spinner dialogSpinner
    - RecyclerView listTasks
    - TextView lblNoTasks
    - ItemViewModel itemViewModel

    - onPositiveButtonClick(DialogInterface)
    - showAddTaskDialog() void
    - addTask(Task) void
    - updateTasks()
    - AlertDialog getAddTaskDialog()
    - populateDialogSpinner()
    - enum SortMethod{ALPHABETICAL,
                              ALPHABETICAL_INVERTED,
                              RECENT_FIRST,
                              OLD_FIRST,
                              NONE}
    - configureViewModel() void
    - getTasks() void
    - getAllProject() void
}


class Task {
    - long id;
    - long projectId;
    - String name;
    - long creationTimestamp;

    + Task(long, long, String, long)
    + getId() :long
    + setId(long) void
    + getProject() :Project.getProjectById(projectId)
    + getProjectId() :long
    + setProjectId(long) void
    + getName() :String
    + setName(String) void
    + getCreationTimestamp() :long
    - setCreationTimestamp(long) void
}

 class TaskAZComparator <<static>> implements Comparator {
        + int compare(Task left, Task right) :int
    }

class TaskRecentComparator <<static>> implements Comparator {
        + int compare(Task left, Task right) :int
    }

 class TaskOldComparator <<static>> implements Comparator{
        + int compare(Task left, Task right) :int
    }

Task +-- "2" TaskAZComparator
Task +-- TaskRecentComparator
Task +-- TaskOldComparator


class Project {
    -long id
    -String name
    -int color

    -Project(long , String , int)
    +{static} getAllProjects() :Project[]
    +{static} getProjectById(long id) :Project
    +getId() :long
    +setId(long) void
    +getName() :String
    +setName(String) void
    +getColor() :int
    +toString() :getName
    }

class TasksAdapter extends RecyclerView.Adapter{
        - Task[] tasks;
        - Project[] taskProject
        - DeleteTaskListener deleteTaskListener {readOnly}
        + TasksAdapter( DeleteTaskListener ) {
        + updateTasks(Project[], Task[])
}

class TaskViewHolder extends RecyclerView.ViewHolder {
        - AppCompatImageView imgProject {readOnly}
        - TextView lblTaskName {readOnly}
        - TextView lblProjectName {readOnly}
        - AppCompatImageView imgDelete {readOnly}
        - DeleteTaskListener deleteTaskListener {readOnly}
        + TaskViewHolder(View, DeleteTaskListener)
        + bind(Task) void
    }

interface DeleteTaskListener {
            void onDeleteTask(Task);
}


interface TaskDao{
+getTasks() :LiveData Task[]
+long insertTask(Task pTask) void
+int deleteTask(long taskId) void
}

interface ProjectDao {
+getAllProject() :LiveData Project[]
+long createProject(Project) void
}

class TodocDataBase <<abstract>>  extends RoomDatabase {
-{static} volatile TodocDataBase INSTANCE
+{abstract} TaskDao taskDao();
+{abstract} ProjectDao ProjectDao();
+{static} TodocDataBase getInstance(Context) :INSTANCE
-{static} Callback prepopulateDatabase()
}


class ItemViewModel extends ViewModel {
- TaskDataRepository taskDataSource {readOnly}
- ProjectDataRepository projectDataSource {readOnly}
- Executor executor {readOnly}
- LiveData Task[] currentTasks;
+ ItemViewModel(TaskDataRepository, ProjectDataRepository, Executor)
+ init()
+ getAllProject() : LiveData Project[]
+ addTask(Task) void
+ deleteTask(Long) void
+ getTasks() :LiveData Task[]
}

class TaskDataRepository {
    -TaskDao taskDao {readOnly}
    +TaskDataRepository(TaskDao)
    +getTasks() :LiveData Task[]
    + addTask(Task) void
    + deleteTask(long taskId) void
}

class ProjectDataRepository {
    - ProjectDao projectDao {readOnly}
    + ProjectDataRepository(ProjectDao pProjectDao)
    + getAllProject() :LiveData Project[]
}

class ViewModelFactory implements ViewModelProvider.Factory {
    - ProjectDataRepository projectDataSource {readOnly}
    - TaskDataRepository taskDataSource {readOnly}
    - Executor executor {readOnly}
    public ViewModelFactory(TaskDataRepository, ProjectDataRepository , Executor)
}

class Injection {
+ {static} ProjectDataRepository provideProjectDataSource(Context):ProjectDataRepository(dataBase.ProjectDao())
+ {static} TaskDataRepository provideTaskDataSource(Context):TaskDataRepository(dataBase.taskDao());
+ {static} Executor provideExecutor() :Executors.newSingleThreadExecutor()
+ {static} ViewModelFactory provideViewModelFactory(Context):ViewModelFactory(dataSourceTask, dataSourceProject, executor);
}



TasksAdapter +-- DeleteTaskListener
TasksAdapter +-- TaskViewHolder
@enduml