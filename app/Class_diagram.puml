@startuml
skinparam classAttributeIconSize 0

class MainActivity extends AppCompatActivity implements DeleteTaskListener {

    - Project[] allProjects
    - Task[] tasks
    - TasksAdapter adapter {readOnly}
    - SortMethod sortMethod
    + AlertDialog dialog
    - EditText dialogEditText
    - Spinner dialogSpinner
    - RecyclerView listTasks
    - ItemViewModel itemViewModel

    - onPositiveButtonClick(DialogInterface dialogInterface) void
    - showAddTaskDialog() void
    - addTask(Task task) void
    - updateTasks() void
    - AlertDialog getAddTaskDialog() void
    - populateDialogSpinner() void
    - enum SortMethod{ALPHABETICAL,
                              ALPHABETICAL_INVERTED,
                              RECENT_FIRST,
                              OLD_FIRST,
                              NONE}
    - configureViewModel() void
    - getTasks() void
    - getAllProject() void
}
MainActivity "1" -down-> "0..*" Task
MainActivity "1" -down-> "1" Injection

class Task {
    - long id;
    - long projectId
    - String name;
    - long creationTimestamp;

    + Task(long, String, long)
    + getProjectId() : projectId
    + long getId() :id
    + setId(long)
    + setProjectId(long) void
    + getProject() :Project.getProjectById(long)
    + getProjectId() :long
    + getName() :String
    + setName(String) void
    + getCreationTimestamp() :long
    - setCreationTimestamp(long) void
}

Task  +-- "2" TaskAZComparator
Task +-- TaskRecentComparator
Task +-d- TaskOldComparator


class TaskAZComparator <<static>> implements Comparator {
        + compare(Task left, Task right) :int
    }

class TaskRecentComparator <<static>> implements Comparator {
        + compare(Task left, Task right) :int
    }

 class TaskOldComparator <<static>> implements Comparator{
        + compare(Task left, Task right) :int
    }

class Project {
    -long id
    -String name
    -int color

    -Project(long, String, int)
    +getId() :Long
    +getName() :String
    +getColor() :int
    +static Project[] getAllProjects() :Project[]
    +static Project getProjectById(long) :Project
    +setId(long) void
    +setName(String) void
    +String toString() :getName()
    }

class TasksAdapter extends RecyclerView.Adapter{
    -Task[] tasks
    -Project[] taskProject
    -DeleteTaskListener deleteTaskListener {readOnly}
    TasksAdapter(DeleteTaskListener)
    updateTasks(Project[], Task[]) void
    bind(Task) void
}

interface DeleteTaskListener{
onDeleteTask(Task) void
}

class TaskViewHolder extends RecyclerView.ViewHolder {
        - AppCompatImageView imgProject {readOnly}
        - TextView lblTaskName {readOnly}
        - TextView lblProjectName {readOnly}
        - AppCompatImageView imgDelete {readOnly}
        - DeleteTaskListener deleteTaskListener {readOnly}
          TaskViewHolder(View, DeleteTaskListener)
    }

class TodocDataBase <<abstract>> extends RoomDatabase {
        -static volatile TodocDataBase INSTANCE;
        +static TodocDataBase getInstance(Context) :INSTANCE
        + static Callback prepopulateDatabase()
    }
TaskDao "1" <-down- "1" TodocDataBase
ProjectDao "1" <-down- "1" TodocDataBase


interface TaskDao {
    +LiveData [Task] getTasks()
    +long insertTask(Task) void
    +int deleteTask(long ) void
}


interface ProjectDao {
   +LiveData [Project] getAllProject() :Project[]
   +long createProject(Project) void
}

class ViewModelFactory implements ViewModelProvider.Factory {
    private final Executor executor
    public ViewModelFactory(TaskDataRepository, ProjectDataRepository, Executor)
 }

Injection "1" -down-> "1" ViewModelFactory
ViewModelFactory "1" -down-> "1" TaskDataRepository
ViewModelFactory "1" -down-> "1" ProjectDataRepository

class Injection <<static>> {
+static ProjectDataRepository provideProjectDataSource(Context) :ProjectDataRepository(dataBase.ProjectDao())
+TaskDataRepository provideTaskDataSource(Context) :TaskDataRepository(dataBase.taskDao());
+static Executor provideExecutor() :Executors.newSingleThreadExecutor()
+static ViewModelFactory provideViewModelFactory(Context) :ViewModelFactory(dataSourceTask, dataSourceProject, executor)
}


class ProjectDataRepository {
    -ProjectDao projectDao {readOnly}
    +ProjectDataRepository(ProjectDao)
    + getAllProject() :LiveData Project[]
}


class TaskDataRepository {
    -TaskDao taskDao {readOnly}

    +TaskDataRepository(TaskDao)
    +getTasks() :LiveData Task[]
    +addTask(Task) void
    +deleteTask(long) void
}

class ItemViewModel extends ViewModel {
    - final TaskDataRepository taskDataSource;
    - final ProjectDataRepository projectDataSource;
    - final Executor executor;
    - LiveData Task[] currentTasks;

    + ItemViewModel(TaskDataRepository, ProjectDataRepository, Executor)
    + init() void
    + getAllProject() :LiveData Project[]
    + void  addTask(Task)
    + void  deleteTask(Long)
    +  getTasks() :LiveData Task[]
}



TasksAdapter +-- DeleteTaskListener
TasksAdapter +-- TaskViewHolder
@enduml