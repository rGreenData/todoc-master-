@startuml
skinparam classAttributeIconSize 0

class MainActivity extends AppCompatActivity implements DeleteTaskListener {

    - Project[] allProjects
    - ArrayList<Task> tasks
    - TasksAdapter adapter {readOnly}
    - SortMethod sortMethod
    + AlertDialog dialog
    - Spinner dialogSpinner
    - RecyclerView listTasks

    - onPositiveButtonClick(DialogInterface dialogInterface)
    - showAddTaskDialog() void
    - addTask(Task task) void
    - updateTasks() void
    - AlertDialog getAddTaskDialog() void
    - populateDialogSpinner() void
    - enum SortMethod{ALPHABETICAL,
                              ALPHABETICAL_INVERTED,
                              RECENT_FIRST,
                              OLD_FIRST,
                              NONE}
    - configureViewModel() void
    - getTasks() void
    - getAllProject() void
}
MainActivity "1" -down-> "0..*" Task
MainActivity "1" -down-> "1" Injection

class Task {
    - long id;
    - long projectId;
    - String name;
    - long creationTimestamp;

    + Task(long, long, String, long)
    + long getId() id;
    - setId(long)
    - setProjectId(long)
    + getName() :String
    - setName(String)
    - setCreationTimestamp(long)
}

 class TaskAZComparator <<static>> implements Comparator {
        + int compare(Task left, Task right)
        right.name.compareTo(left.name);

    }

class TaskRecentComparator <<static>> implements Comparator {
        + int compare(Task left, Task right)
           (right.creationTimestamp - left.creationTimestamp)

    }

 class TaskOldComparator <<static>> implements Comparator{
        + int compare(Task left, Task right)
            (left.creationTimestamp - right.creationTimestamp)

    }

class Project {
    -long id
    -String name
    -int color

    -Project(long, String, int)
    +lgetId() :Long
    +getName() :String
    +getColor() :int
    }

class TasksAdapter extends RecyclerView.Adapter{
    -List<Task> tasks;
    -DeleteTaskListener deleteTaskListener {readOnly}
    TasksAdapter(List<Task> tasks, DeleteTaskListener deleteTaskListener)
    updateTasks(List<Task> tasks) void

    bind(Task task) void
}

interface DeleteTaskListener{
onDeleteTask(Task task) void
}

class TaskViewHolder extends RecyclerView.ViewHolder {
        - AppCompatImageView imgProject {readOnly}
        - TextView lblTaskName {readOnly}
        - TextView lblProjectName {readOnly}
        - AppCompatImageView imgDelete {readOnly}
        - DeleteTaskListener deleteTaskListener {readOnly}
          TaskViewHolder(View, DeleteTaskListener)
    }

class TodocDataBase <<abstract>> extends RoomDatabase {
        -static volatile TodocDataBase INSTANCE;
        +static TodocDataBase getInstance(Context) : TodocDataBase
    }
TaskDao "1" <-down- "1" TodocDataBase
ProjectDao "1" <-down- "1" TodocDataBase
Project "1...*" <-down- "1" TodocDataBase

interface TaskDao {
    +LiveData<List<Task>> getTasks();
    +long insertTask(Task);
    +int deleteTask(long );
}


interface ProjectDao {
   +LiveData<List<Project>> getAllProject();
   +long createProject(Project);
}

class ViewModelFactory implements ViewModelProvider.Factory {

    private final ProjectDataRepository projectDataSource;
    private final TaskDataRepository taskDataSource;
    private final Executor executor;

    public ViewModelFactory(TaskDataRepository, ProjectDataRepository, Executor)
    }
Injection "1" -down-> "1" ViewModelFactory
ViewModelFactory "1" -down-> "1" TaskDataRepository
ViewModelFactory "1" -down-> "1" ProjectDataRepository

class Injection <<static>> {
+static ProjectDataRepository provideProjectDataSource(Context context) :ProjectDataRepository(dataBase.ProjectDao());
TaskDataRepository provideTaskDataSOurce(Context context) :TaskDataRepository(dataBase.taskDao());
+static Executor provideExecutor() :Executors.newSingleThreadExecutor()
+static ViewModelFactory provideViewModelFactory(Context context) :ViewModelFactory(dataSourceTask, dataSourceProject, executor);
}


class ProjectDataRepository {
    -ProjectDao projectDao {readOnly}
    +ProjectDataRepository(ProjectDao pProjectDao)

    public LiveData<List<Project>> getAllProject() :LiveData<List<Project>>

}


class TaskDataRepository {
    -TaskDao taskDao {readOnly}

    +TaskDataRepository(TaskDao pTaskDao)
    +LiveData<List<Task>> getTasks() :LiveData<List<Task>>
    +addTask(Task pTask) void
    +deleteTask(long taskId) void
}


TasksAdapter +-- DeleteTaskListener
TasksAdapter +-- TaskViewHolder
Task +-- TaskAZComparator
Task +-- TaskRecentComparator
Task +-d- TaskOldComparator
@enduml